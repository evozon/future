// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/summary/summary.proto

package summary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SummaryClient is the client API for Summary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (Summary_PullClient, error)
}

type summaryClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryClient(cc grpc.ClientConnInterface) SummaryClient {
	return &summaryClient{cc}
}

func (c *summaryClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, "/Summary/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (Summary_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &Summary_ServiceDesc.Streams[0], "/Summary/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &summaryPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Summary_PullClient interface {
	Recv() (*PushRequest, error)
	grpc.ClientStream
}

type summaryPullClient struct {
	grpc.ClientStream
}

func (x *summaryPullClient) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SummaryServer is the server API for Summary service.
// All implementations must embed UnimplementedSummaryServer
// for forward compatibility
type SummaryServer interface {
	Push(context.Context, *PushRequest) (*PushResponse, error)
	Pull(*PullRequest, Summary_PullServer) error
	mustEmbedUnimplementedSummaryServer()
}

// UnimplementedSummaryServer must be embedded to have forward compatible implementations.
type UnimplementedSummaryServer struct {
}

func (UnimplementedSummaryServer) Push(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedSummaryServer) Pull(*PullRequest, Summary_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedSummaryServer) mustEmbedUnimplementedSummaryServer() {}

// UnsafeSummaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryServer will
// result in compilation errors.
type UnsafeSummaryServer interface {
	mustEmbedUnimplementedSummaryServer()
}

func RegisterSummaryServer(s grpc.ServiceRegistrar, srv SummaryServer) {
	s.RegisterService(&Summary_ServiceDesc, srv)
}

func _Summary_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Summary/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Summary_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SummaryServer).Pull(m, &summaryPullServer{stream})
}

type Summary_PullServer interface {
	Send(*PushRequest) error
	grpc.ServerStream
}

type summaryPullServer struct {
	grpc.ServerStream
}

func (x *summaryPullServer) Send(m *PushRequest) error {
	return x.ServerStream.SendMsg(m)
}

// Summary_ServiceDesc is the grpc.ServiceDesc for Summary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Summary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Summary",
	HandlerType: (*SummaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Summary_Push_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _Summary_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/summary/summary.proto",
}
